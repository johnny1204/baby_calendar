# circleci config validate
version: 2.1
orbs:
  slack: circleci/slack@4.3.1
  chatwork: guitarrapc/chatwork@0.0.2
executors:
  test-with-db:
    working_directory: ~/repo
    docker:
      - image: circleci/php:7.4-node-browsers
      - image: circleci/mariadb:latest-ram
        environment:
          MYSQL_USER: db_user
          MYSQL_PASSWORD: db_password
          MYSQL_DATABASE: test_db
          MYSQL_ROOT_PASSWORD: root
          DB_PORT: 3306
          DB_HOST: db
commands:
  install-dockerize:
    steps:
      - run:
          name: Install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
  setup-server:
    steps:
      - run:
          command: |
            sudo docker-php-ext-install pdo_mysql bcmath
  restore-composer-cache:
    steps:
      - restore_cache:
          keys:
            - composer-v1-{{ checksum "composer.lock" }}
            - composer-v1-
  composer-install:
    steps:
      - run:
          name: composerインストール
          command: composer install -n --prefer-dist
  save-composer-cache:
    steps:
      - save_cache:
          name: composerキャッシュ保存
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - ./vendor
  restore-node-modules-cache:
    steps:
      - restore_cache:
          keys:
            - node-v1-{{ checksum "yarn.lock" }}
            - node-v1
  install-node-modules:
    steps:
      - run:
          name: node_modules install
          command: yarn
  save-node-modules-cache:
    steps:
      - save_cache:
          name: node_modules依存関係キャッシュ保存
          key: node-v1-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
  wait-db:
    steps:
      - run:
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
  tests:
    steps:
      - run:
          name: setup env
          command: |
            cp .env.example .env
            cp .env.ci.example .env.testing
            php artisan key:generate --env=testing
      - run:
          name: migrate db
          command: php artisan migrate --env=testing
      - run:
          name: php stan
          command: ./vendor/bin/phpstan analyse --memory-limit=-1
      - run:
          name: php unit
          command: ./vendor/bin/phpunit --configuration phpunit.xml -d memory_limit=1
  slack-notify:
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1
      - slack/notify:
          event: fail
          template: basic_fail_1
  chatwork-notify:
    steps:
      - chatwork/notify:
          message: Job Succeeded.
          room_id: ${CHATWORK_ROOM_ID}
          when: on_success
      - chatwork/notify:
          message: Job Failed.
          room_id: ${CHATWORK_ROOM_ID}
          when: on_fail
jobs:
  build:
    executor: test-with-db
    steps:
      - install-dockerize
      - checkout
      - setup-server
      - restore-composer-cache
      - composer-install
      - save-composer-cache
      - restore-node-modules-cache
      - install-node-modules
      - save-node-modules-cache
      - persist_to_workspace:
          root: .
          paths:
            - .
  test:
    executor: test-with-db
    steps:
      - attach_workspace:
          at: .
      - setup-server
      - wait-db
      - tests
      - slack-notify
      # - chatwork-notify
workflows:
  version: 2
  build_test:
    jobs:
      - build
      - test:
          requires:
            - build
